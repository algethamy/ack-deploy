#!/bin/bash

# ACK Deployment Script for {{ APP_NAME }}
# Generated by laravel-ack-deploy package

set -e

echo "ðŸš€ Starting ACK deployment for {{ APP_NAME }}..."

# Configuration
APP_NAME="{{ APP_NAME }}"
REGISTRY="{{ REGISTRY }}"
NAMESPACE="{{ NAMESPACE }}"
IMAGE_TAG=${IMAGE_TAG:-latest}

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

echo_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

echo_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check dependencies
check_dependencies() {
    echo_info "Checking dependencies..."
    
    if ! command -v docker &> /dev/null; then
        echo_error "Docker is not installed"
        exit 1
    fi
    
    if ! command -v kubectl &> /dev/null; then
        echo_error "kubectl is not installed"
        exit 1
    fi
    
    echo_info "Dependencies check passed"
}

# Build Docker image
build_image() {
    echo_info "Building Docker image..."
    docker build --platform linux/amd64 -t $REGISTRY/$APP_NAME:$IMAGE_TAG -f Dockerfile.ack .
    echo_info "Docker image built successfully"
}

# Push Docker image
push_image() {
    echo_info "Pushing Docker image to registry..."
    docker push $REGISTRY/$APP_NAME:$IMAGE_TAG
    echo_info "Docker image pushed successfully"
}

# Deploy to Kubernetes
deploy_k8s() {
    echo_info "Deploying to Kubernetes..."
    
    # Create namespace if it doesn't exist
    kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
    
    # Apply Kubernetes manifests
    kubectl apply -f k8s/ -n $NAMESPACE
    
    echo_info "Kubernetes deployment completed"
}

# Wait for deployment
wait_for_deployment() {
    echo_info "Waiting for deployment to be ready..."
    kubectl wait --for=condition=available --timeout=300s deployment/$APP_NAME-app -n $NAMESPACE
    echo_info "Deployment is ready"
}

# Get service URL
get_service_url() {
    echo_info "Getting service URL..."
    EXTERNAL_IP=$(kubectl get service $APP_NAME-service -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
    
    if [ -z "$EXTERNAL_IP" ]; then
        echo_warn "External IP not yet assigned. Please run: kubectl get service $APP_NAME-service -n $NAMESPACE"
    else
        echo_info "Application is available at: http://$EXTERNAL_IP"
    fi
}

# Main execution
main() {
    check_dependencies
    build_image
    push_image
    deploy_k8s
    wait_for_deployment
    get_service_url
    
    echo_info "âœ… Deployment completed successfully!"
}

# Run main function
main "$@"